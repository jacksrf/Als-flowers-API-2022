'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var needlerOptions = {
  haystack: false,
  header: false,
  footer: false,
  flags: 'i'
};

var find = function find(options, callback) {

  mergeAndValidateOptions(options, function (error) {

    if (error) {
      if (callback) callback(error);else return false;
    }

    var regex = new RegExp(needlerOptions.header + '(.+?)' + needlerOptions.footer);
    var result = needlerOptions.haystack.match(regex);
    var match = result && result[1] ? result[1] : false;

    if (callback) callback(false, match);
  });
};

var replace = function replace(options, callback) {

  mergeAndValidateOptions(options, function (error) {

    if (error) {
      if (callback) callback(error);else return false;
    }

    var regex = undefined;

    if (needlerOptions.flags) {
      regex = new RegExp(needlerOptions.header + '([\\w\\s]+)' + needlerOptions.footer, needlerOptions.flags);
    } else {
      regex = new RegExp(needlerOptions.header + '([\\w\\s]+)' + needlerOptions.footer);
    }

    var replace = '' + needlerOptions.header + needlerOptions.replace + needlerOptions.footer;
    var result = needlerOptions.haystack.replace(regex, replace);
    if (callback) callback(false, result);
  });
};

var mergeAndValidateOptions = function mergeAndValidateOptions(options, callback) {

  if (!options.haystack) {
    callback('Haystack is required.');
  } else if (!options.header) {
    callback('Header is required.');
  } else if (!options.footer) {
    callback('Footer is required.');
  } else {
    needlerOptions = Object.assign(needlerOptions, options);
    callback(false);
  }
};

exports.find = find;
exports.replace = replace;